Название задания: mini_serv
Ожидаемые файлы: mini_serv.c
Разрешенные функции: запись, закрытие, выбор, сокет, прием, прослушивание, отправка, получение, связывание, strstr, malloc, realloc, free, calloc,
bzero, atoi, sprintf, strlen, выход, strcpy, strcat, memset
-------------------------------------------------- ------------------------------

Напишите программу, которая будет прослушивать подключение клиента к определенному порту на 127.0.0.1
и позволит клиентам общаться друг с другом.

Эта программа примет в качестве первого аргумента порт для привязки.
Если аргумент не указан, он должен написать в stderr «Неправильное количество аргументов», за которым следует \n, и выйти со статусом 1.
Если системные вызовы возвращают ошибку до того, как программа начнет принимать соединение,
она должна написать в stderr «Неустранимая ошибка», за которой следует \n, и выйти со статусом 1.
Если вы не можете выделить память, он должен написать в stderr «Фатальная ошибка», за которой следует \n, и выйти со статусом 1.

Ваша программа должна быть неблокирующей, но клиент может быть ленивым, и если он не прочитает ваше сообщение, вы НЕ должны его отключать...

Ваша программа не должна содержать #define preproc
Ваша программа должна слушать только 127.0.0.1
FD, который вы получите, уже будет настроен на блокировку 'recv' или 'send',
если select не был вызван перед их вызовом, но не будет блокироваться в противном случае.

Когда клиент подключается к серверу:
- клиенту будет присвоен идентификатор. первый клиент получит идентификатор 0, а каждый новый клиент получит последний идентификатор клиента + 1
- %d будет заменен этим номером
- всем клиентам, которые были подключены к серверу, отправляется сообщение: "сервер: клиент %d только что прибыл\n"

клиенты должны иметь возможность отправлять сообщения вашей программе.
- сообщение будет состоять только из печатных символов, проверять не нужно
- одно сообщение может содержать несколько \n
- когда сервер получает сообщение, он должен отправить его всем остальным клиентам с "client %d:" перед каждой строкой!

Когда клиент отключается от сервера:
- всем клиентам, которые были подключены к серверу, отправляется сообщение: "сервер: клиент %d только что ушел\n"

Утечки памяти или fd запрещены

В помощь вам вы найдете файл main.c с началом сервера и, возможно, некоторыми полезными функциями.
(Остерегайтесь, что этот файл использует запрещенные функции или записывает вещи, которых не должно быть в вашей окончательной программе)

Предупреждение: наш тестер ожидает, что вы будете отправлять сообщения как можно быстрее. Не делайте ненужный буфер.

Оценка может быть немного дольше, чем обычно...

Подсказка: вы можете использовать nc для тестирования вашей программы
Подсказка: вы должны использовать nc для тестирования вашей программы
Подсказка: для проверки вы можете использовать fcntl(fd, F_SETFL, O_NONBLOCK), но использовать select и НИКОГДА не проверять EAGAIN (man 2 send)


- Проверка на ac != 2
- Структура sockaddr_in - из main
- int sock_fd = socket(из main) if
- Заполнение sockaddr_in.*
- bind
- listen(sockfd, 0)


socket - создает конечную точку соединения
bind - привязать имя к сокету
listen - слушать соединения на сокете
select - многопоточный синхронный ввод-вывод